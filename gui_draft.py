# -*- coding: utf-8 -*-
"""GUI_draft.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hNmP3J7-ggcggA9hjsz4afqqpmt89r6j
"""

import cv2
import tkinter as tk
from tkinter import *
from PIL import Image,ImageTk
from datetime import datetime
from tkinter import messagebox, filedialog

def CreateWidgets():
    root.cameraLabel = Label(root,
                             bg="steelblue",
                             borderwidth=3,
                             relief="groove")
    root.cameraLabel.grid(row=2, column=1, 
                          padx=10, pady=10, 
                          columnspan=2)
    
    root.instructionLabel = Label(root,
                            bg="steelblue",
                            fg="white",
                            text="Instructions for Hand Gesture:",
                            font=('Times New Roman', 20),
                            borderwidth=3,
                            relief="groove")
    root.instructionLabel.grid(row=1, column=4,
                               padx=10, pady=10,
                               columnspan=2)
        
    root.CAMBTN = Button(root,
                         text="Camera Status: ON",
                         command=CamStop,
                         bg="LIGHTBLUE",
                         font=('Times New Roman', 15),
                         width=15)
    root.CAMBTN.grid(row=4, column=1)
    
    ShowFeed()

def ShowFeed():
    # Capture each frame from camera
    ret, frame = root.cap.read()
    if ret:
        # Color correct from BGR to RGB
        ccFrame = cv2.cvtColor(frame,
                            cv2.COLOR_BGR2RGBA)
        ccImg = Image.fromarray(ccFrame)

        # Display frame with PhotoImage object
        imgTk = ImageTk.PhotoImage(image=ccImg)
        root.cameraLabel.configure(image=imgTk)

        # Reference to frame
        root.cameraLabel.imgTk = imgTk
        
        # Call ShowFeed for next frame after 10ms
        root.cameraLabel.after(10, ShowFeed)
    else:
        root.cameraLabel.configure(image='')

# Define function for turning CAM off
def CamStop():
    # Release camera device and update button
    root.cap.release()
    root.CAMBTN.config(text="Camera Status: OFF",
                       command=CamStart)
    # Replace cameraLabel with text
    root.cameraLabel.config(text="Camera is OFF",
                            font=('Times New Roman',
                                  50))

def CamStart():
    # Recreate VideoCapture object
    root.cap = cv2.VideoCapture(0)
    
    # Setting width and height
    width_cam, height_cam = 640, 480
    root.cap.set(cv2.CAP_PROP_FRAME_WIDTH, width_cam)
    root.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height_cam)
    
    # Configure camera button controls
    root.CAMBTN.config(text="Camera Status: ON",
                       command=CamStop)
    
    # Reset cameraLabel to showing feed state
    root.cameraLabel.config(text="")
    ShowFeed()

# Create GUI object
root = tk.Tk()

root.cap = cv2.VideoCapture(0)

width, height = 640, 480
root.cap.set(cv2.CAP_PROP_FRAME_WIDTH, width)
root.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height)

# Format GUI window
root.title("SG_GESTURE GUI")
root.geometry("1200x720")
root.resizable(True, True)
root.configure(background = "Gray")

CreateWidgets()
root.mainloop()



